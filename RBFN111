{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "RBFN.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nwi8aLBN36DQ"
      },
      "source": [
        "# Import Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3N4JnWnvHQYT"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import svm, metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Import label encoder\n",
        "from sklearn import preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lDNii_RY4EqZ"
      },
      "source": [
        "# Import Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_5eS18qUP0uG"
      },
      "outputs": [],
      "source": [
        "data = pd.read_csv('CTG.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "PBC-st_8e78I",
        "outputId": "080a601f-7515-44c5-f175-39ab303cf94f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     LBE     LB   AC   FM   UC  ASTV  MSTV  ALTV  MLTV   DL  ...    Max  Nmax  \\\n",
              "0  120.0  120.0  0.0  0.0  0.0  73.0   0.5  43.0   2.4  0.0  ...  126.0   2.0   \n",
              "1  132.0  132.0  4.0  0.0  4.0  17.0   2.1   0.0  10.4  2.0  ...  198.0   6.0   \n",
              "2  133.0  133.0  2.0  0.0  5.0  16.0   2.1   0.0  13.4  2.0  ...  198.0   5.0   \n",
              "3  134.0  134.0  2.0  0.0  6.0  16.0   2.4   0.0  23.0  2.0  ...  170.0  11.0   \n",
              "4  132.0  132.0  4.0  0.0  5.0  16.0   2.4   0.0  19.9  0.0  ...  170.0   9.0   \n",
              "\n",
              "   Nzeros   Mode   Mean  Median  Variance  Tendency  CLASS  NSP  \n",
              "0     0.0  120.0  137.0   121.0      73.0       1.0    9.0  2.0  \n",
              "1     1.0  141.0  136.0   140.0      12.0       0.0    6.0  1.0  \n",
              "2     1.0  141.0  135.0   138.0      13.0       0.0    6.0  1.0  \n",
              "3     0.0  137.0  134.0   137.0      13.0       1.0    6.0  1.0  \n",
              "4     0.0  137.0  136.0   138.0      11.0       1.0    2.0  1.0  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-665bed6c-e6c9-4e0d-8003-568976d920e2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>LBE</th>\n",
              "      <th>LB</th>\n",
              "      <th>AC</th>\n",
              "      <th>FM</th>\n",
              "      <th>UC</th>\n",
              "      <th>ASTV</th>\n",
              "      <th>MSTV</th>\n",
              "      <th>ALTV</th>\n",
              "      <th>MLTV</th>\n",
              "      <th>DL</th>\n",
              "      <th>...</th>\n",
              "      <th>Max</th>\n",
              "      <th>Nmax</th>\n",
              "      <th>Nzeros</th>\n",
              "      <th>Mode</th>\n",
              "      <th>Mean</th>\n",
              "      <th>Median</th>\n",
              "      <th>Variance</th>\n",
              "      <th>Tendency</th>\n",
              "      <th>CLASS</th>\n",
              "      <th>NSP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>120.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>43.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>132.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>198.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>133.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>198.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>135.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>134.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>170.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>132.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>19.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>170.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-665bed6c-e6c9-4e0d-8003-568976d920e2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-665bed6c-e6c9-4e0d-8003-568976d920e2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-665bed6c-e6c9-4e0d-8003-568976d920e2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "data = data.drop(['FileName','Date','SegFile','A','B','C','D','E','AD','DE','LD','FS','SUSP','DR','b','e'],axis=1)\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kfh3CyMEfAR2",
        "outputId": "1e816e87-c9a8-4a84-c3a6-7154040382b9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LBE         3\n",
              "LB          3\n",
              "AC          3\n",
              "FM          2\n",
              "UC          2\n",
              "ASTV        2\n",
              "MSTV        2\n",
              "ALTV        2\n",
              "MLTV        2\n",
              "DL          1\n",
              "DS          1\n",
              "DP          1\n",
              "Width       3\n",
              "Min         3\n",
              "Max         3\n",
              "Nmax        3\n",
              "Nzeros      3\n",
              "Mode        3\n",
              "Mean        3\n",
              "Median      3\n",
              "Variance    3\n",
              "Tendency    3\n",
              "CLASS       3\n",
              "NSP         3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LDg_MKghfC_s"
      },
      "outputs": [],
      "source": [
        "data = data.dropna()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3lzVfUPJczkM",
        "outputId": "7525ed3d-7956-45a1-986a-0923737ed293"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 1.0\n",
            "Q3= 4.0\n",
            "Interquartile range is 4.0\n",
            "low_limit is -6.0\n",
            "up_limit is 10.0\n",
            "outlier in the dataset is [12.0, 11.0, 13.0, 12.0, 11.0, 15.0, 11.0, 13.0, 12.0, 17.0, 13.0, 11.0, 17.0, 11.0, 18.0, 12.0, 11.0, 11.0, 13.0, 16.0, 14.0, 14.0, 12.0, 11.0, 13.0, 12.0, 14.0, 12.0, 14.0, 12.0, 12.0, 11.0, 12.0, 12.0, 19.0, 19.0, 13.0, 17.0, 13.0, 13.0, 15.0, 12.0, 14.0, 26.0, 18.0, 12.0, 17.0, 13.0, 14.0, 13.0, 17.0, 14.0, 14.0, 14.0, 11.0, 11.0, 12.0, 13.0, 11.0, 11.0, 14.0, 13.0, 14.0, 11.0, 15.0, 13.0, 15.0, 14.0, 13.0, 12.0, 15.0, 14.0, 16.0, 13.0, 12.0, 17.0, 17.0, 16.0, 16.0, 11.0, 12.0, 11.0, 21.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['AC'],25)\n",
        "Q2 = np.percentile(data['AC'],50)\n",
        "Q3 = np.percentile(data['AC'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['AC']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['AC'] = np.where(data['AC']>up_lim, up_lim, data['AC']) \n",
        "data['AC'] = np.where(data['AC']<low_lim, low_lim, data['AC'])\n",
        "outlier = []\n",
        "for x in data['AC']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aGnr8B5GdTLj",
        "outputId": "aa645b21-1ac3-4058-f55e-f611dfb3f2ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 0.0\n",
            "Q3= 2.0\n",
            "Interquartile range is 2.0\n",
            "low_limit is -3.0\n",
            "up_limit is 5.0\n",
            "outlier in the dataset is [57.0, 147.0, 489.0, 273.0, 290.0, 251.0, 317.0, 557.0, 304.0, 272.0, 219.0, 162.0, 65.0, 129.0, 79.0, 64.0, 123.0, 56.0, 90.0, 95.0, 52.0, 54.0, 69.0, 31.0, 25.0, 9.0, 14.0, 14.0, 6.0, 7.0, 6.0, 20.0, 20.0, 47.0, 10.0, 8.0, 35.0, 24.0, 44.0, 34.0, 6.0, 9.0, 16.0, 7.0, 10.0, 8.0, 9.0, 10.0, 18.0, 6.0, 12.0, 7.0, 9.0, 19.0, 9.0, 6.0, 7.0, 9.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 10.0, 12.0, 7.0, 6.0, 16.0, 9.0, 18.0, 10.0, 13.0, 12.0, 14.0, 10.0, 22.0, 13.0, 20.0, 13.0, 7.0, 6.0, 17.0, 14.0, 26.0, 10.0, 26.0, 10.0, 9.0, 8.0, 18.0, 15.0, 10.0, 15.0, 6.0, 19.0, 15.0, 14.0, 6.0, 12.0, 9.0, 12.0, 11.0, 6.0, 11.0, 6.0, 6.0, 15.0, 12.0, 9.0, 8.0, 12.0, 9.0, 8.0, 11.0, 28.0, 12.0, 15.0, 16.0, 15.0, 42.0, 40.0, 20.0, 50.0, 39.0, 11.0, 26.0, 26.0, 7.0, 6.0, 6.0, 6.0, 46.0, 8.0, 8.0, 70.0, 42.0, 62.0, 60.0, 23.0, 21.0, 110.0, 54.0, 98.0, 67.0, 18.0, 13.0, 16.0, 10.0, 10.0, 10.0, 42.0, 23.0, 17.0, 31.0, 29.0, 26.0, 32.0, 21.0, 19.0, 11.0, 75.0, 43.0, 24.0, 31.0, 32.0, 33.0, 18.0, 10.0, 8.0, 6.0, 9.0, 23.0, 18.0, 6.0, 7.0, 7.0, 10.0, 6.0, 11.0, 10.0, 7.0, 22.0, 11.0, 10.0, 20.0, 13.0, 25.0, 20.0, 7.0, 8.0, 8.0, 15.0, 15.0, 8.0, 170.0, 146.0, 167.0, 156.0, 104.0, 142.0, 489.0, 173.0, 265.0, 286.0, 564.0, 314.0, 324.0, 273.0, 443.0, 214.0, 325.0, 325.0, 193.0, 107.0, 110.0, 66.0, 6.0, 7.0, 8.0, 19.0, 10.0, 27.0, 19.0, 10.0, 8.0, 15.0, 13.0, 11.0, 8.0, 50.0, 22.0, 36.0, 41.0, 6.0, 6.0, 14.0, 10.0, 16.0, 7.0, 9.0, 8.0, 10.0, 8.0, 7.0, 7.0, 7.0, 6.0, 12.0, 7.0, 10.0, 8.0, 11.0, 7.0, 12.0, 10.0, 8.0, 6.0, 8.0, 11.0, 6.0, 11.0, 8.0, 11.0, 6.0, 10.0, 7.0, 12.0, 20.0, 19.0, 16.0, 16.0, 15.0, 40.0, 44.0, 32.0, 29.0, 52.0, 29.0, 46.0, 45.0, 42.0, 67.0, 62.0, 32.0, 63.0, 69.0, 44.0, 49.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 13.0, 13.0, 6.0, 8.0, 7.0, 7.0, 10.0, 7.0, 8.0, 8.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['FM'],25)\n",
        "Q2 = np.percentile(data['FM'],50)\n",
        "Q3 = np.percentile(data['FM'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['FM']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['FM'] = np.where(data['FM']>up_lim, up_lim, data['FM']) \n",
        "data['FM'] = np.where(data['FM']<low_lim, low_lim, data['FM'])\n",
        "outlier = []\n",
        "for x in data['FM']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XZWK960RlYkP",
        "outputId": "afde620a-abd8-4880-da8b-1807192991f1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 1.0\n",
            "Q2= 3.0\n",
            "Q3= 5.0\n",
            "Interquartile range is 4.0\n",
            "low_limit is -5.0\n",
            "up_limit is 11.0\n",
            "outlier in the dataset is [12.0, 17.0, 13.0, 12.0, 12.0, 13.0, 14.0, 15.0, 13.0, 14.0, 16.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 14.0, 12.0, 13.0, 12.0, 23.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['UC'],25)\n",
        "Q2 = np.percentile(data['UC'],50)\n",
        "Q3 = np.percentile(data['UC'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['UC']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['UC'] = np.where(data['UC']>up_lim, up_lim, data['UC']) \n",
        "data['UC'] = np.where(data['UC']<low_lim, low_lim, data['UC'])\n",
        "outlier = []\n",
        "for x in data['UC']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OyYAhZsUmRLy",
        "outputId": "30db5afa-c2d4-4cb4-dde5-17714e9ccf26"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.7\n",
            "Q2= 1.2\n",
            "Q3= 1.7\n",
            "Interquartile range is 1.0\n",
            "low_limit is -0.8\n",
            "up_limit is 3.2\n",
            "outlier in the dataset is [5.9, 6.3, 4.4, 6.0, 4.5, 6.9, 3.4, 3.7, 3.4, 3.6, 4.4, 4.7, 4.9, 5.0, 7.0, 4.1, 5.4, 3.9, 5.2, 4.8, 4.3, 3.7, 5.3, 4.8, 3.4, 3.3, 3.4, 3.4, 3.8, 3.7, 5.7, 4.9, 5.0, 4.0, 5.4, 3.5, 3.4, 3.4, 3.8, 3.8, 4.1, 4.9, 6.3, 4.5, 3.6, 3.3, 3.4, 3.6, 3.5, 3.8, 3.4, 3.4, 3.8, 4.2, 3.3, 3.6, 3.4, 3.3, 3.5, 4.0, 3.8, 3.4, 3.3, 3.3, 4.3, 3.9, 3.3, 4.2, 4.1, 4.2]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['MSTV'],25)\n",
        "Q2 = np.percentile(data['MSTV'],50)\n",
        "Q3 = np.percentile(data['MSTV'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['MSTV']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['MSTV'] = np.where(data['MSTV']>up_lim, up_lim, data['MSTV']) \n",
        "data['MSTV'] = np.where(data['MSTV']<low_lim, low_lim, data['MSTV'])\n",
        "outlier = []\n",
        "for x in data['MSTV']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yXbkvz6zmmNZ",
        "outputId": "6da8216e-79a8-45a6-d5c1-350bbc5543ad"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 0.0\n",
            "Q3= 11.0\n",
            "Interquartile range is 11.0\n",
            "low_limit is -16.5\n",
            "up_limit is 27.5\n",
            "outlier in the dataset is [43.0, 79.0, 72.0, 71.0, 40.0, 69.0, 54.0, 53.0, 38.0, 29.0, 37.0, 29.0, 67.0, 68.0, 75.0, 74.0, 30.0, 49.0, 39.0, 31.0, 32.0, 34.0, 38.0, 31.0, 58.0, 39.0, 46.0, 57.0, 75.0, 29.0, 33.0, 40.0, 51.0, 37.0, 34.0, 34.0, 54.0, 58.0, 52.0, 32.0, 38.0, 59.0, 78.0, 84.0, 71.0, 59.0, 52.0, 62.0, 39.0, 45.0, 30.0, 45.0, 35.0, 67.0, 72.0, 45.0, 58.0, 32.0, 41.0, 61.0, 56.0, 84.0, 56.0, 84.0, 44.0, 39.0, 71.0, 71.0, 61.0, 67.0, 81.0, 42.0, 57.0, 56.0, 61.0, 77.0, 67.0, 88.0, 91.0, 78.0, 84.0, 47.0, 41.0, 59.0, 55.0, 61.0, 49.0, 49.0, 82.0, 86.0, 29.0, 67.0, 78.0, 84.0, 60.0, 68.0, 30.0, 32.0, 41.0, 28.0, 38.0, 29.0, 49.0, 35.0, 62.0, 68.0, 70.0, 47.0, 48.0, 51.0, 31.0, 43.0, 50.0, 47.0, 71.0, 48.0, 39.0, 39.0, 38.0, 31.0, 31.0, 34.0, 28.0, 29.0, 38.0, 32.0, 37.0, 32.0, 37.0, 36.0, 28.0, 28.0, 31.0, 40.0, 72.0, 85.0, 64.0, 58.0, 66.0, 91.0, 90.0, 54.0, 70.0, 77.0, 58.0, 81.0, 29.0, 40.0, 38.0, 54.0, 73.0, 43.0, 50.0, 42.0, 53.0, 64.0, 41.0, 34.0, 33.0, 34.0, 37.0, 44.0, 62.0, 29.0, 69.0, 72.0, 91.0, 90.0, 84.0, 42.0, 91.0, 66.0, 40.0, 34.0, 32.0, 30.0, 32.0, 38.0, 32.0, 45.0, 32.0, 32.0, 32.0, 31.0, 33.0, 39.0, 39.0, 44.0, 55.0, 41.0, 33.0, 31.0, 32.0, 32.0, 35.0, 53.0, 44.0, 31.0, 33.0, 57.0, 50.0, 64.0, 59.0, 67.0, 62.0, 71.0, 74.0, 59.0, 48.0, 45.0, 62.0, 59.0, 50.0, 61.0, 39.0, 43.0, 56.0, 62.0, 53.0, 44.0, 48.0, 61.0, 54.0, 37.0, 58.0, 40.0, 30.0, 37.0, 42.0, 28.0, 47.0, 48.0, 28.0, 43.0, 38.0, 28.0, 39.0, 32.0, 61.0, 48.0, 35.0, 34.0, 45.0, 49.0, 42.0, 33.0, 32.0, 32.0, 31.0, 33.0, 35.0, 32.0, 31.0, 28.0, 33.0, 36.0, 49.0, 52.0, 46.0, 41.0, 37.0, 54.0, 60.0, 62.0, 59.0, 62.0, 56.0, 49.0, 38.0, 32.0, 45.0, 30.0, 44.0, 30.0, 46.0, 37.0, 40.0, 54.0, 65.0, 46.0, 34.0, 44.0, 46.0, 55.0, 58.0, 59.0, 64.0, 60.0, 61.0, 73.0, 71.0, 67.0, 63.0, 52.0, 58.0, 35.0, 28.0, 73.0, 70.0, 59.0, 44.0, 34.0, 29.0, 40.0, 36.0, 33.0, 48.0, 36.0, 36.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['ALTV'],25)\n",
        "Q2 = np.percentile(data['ALTV'],50)\n",
        "Q3 = np.percentile(data['ALTV'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['ALTV']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['ALTV'] = np.where(data['ALTV']>up_lim, up_lim, data['ALTV']) \n",
        "data['ALTV'] = np.where(data['ALTV']<low_lim, low_lim, data['ALTV'])\n",
        "outlier = []\n",
        "for x in data['ALTV']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2NbZENYpnC7x",
        "outputId": "33b3e902-b361-4f2b-a826-0334ebedbe8b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 4.6\n",
            "Q2= 7.4\n",
            "Q3= 10.8\n",
            "Interquartile range is 6.200000000000001\n",
            "low_limit is -4.700000000000001\n",
            "up_limit is 20.1\n",
            "outlier in the dataset is [23.0, 27.6, 29.5, 21.7, 24.2, 22.1, 21.1, 22.2, 22.3, 21.3, 25.9, 23.4, 26.3, 35.7, 41.8, 50.7, 25.8, 23.3, 28.4, 21.4, 20.5, 29.6, 29.3, 23.1, 34.7, 21.7, 27.3, 20.5, 26.3, 24.7, 21.5, 27.3, 25.6, 26.1, 36.9, 27.6, 29.0, 28.0, 21.7, 23.8, 40.8, 21.5, 25.8, 21.4, 21.3, 25.2, 21.9, 20.8, 21.3, 22.3, 24.1, 22.5, 27.0, 23.4, 20.4, 29.1, 28.9, 21.1, 20.8, 25.3, 22.7, 24.9, 25.1, 25.4, 23.1, 23.6, 21.3, 33.5, 27.4, 26.1, 21.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['MLTV'],25)\n",
        "Q2 = np.percentile(data['MLTV'],50)\n",
        "Q3 = np.percentile(data['MLTV'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['MLTV']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['MLTV'] = np.where(data['MLTV']>up_lim, up_lim, data['MLTV']) \n",
        "data['MLTV'] = np.where(data['MLTV']<low_lim, low_lim, data['MLTV'])\n",
        "outlier = []\n",
        "for x in data['MLTV']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KZLm4O8MnTqf",
        "outputId": "95172eda-b180-4fa5-f0ed-c9a864f01ce1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 0.0\n",
            "Q3= 3.0\n",
            "Interquartile range is 3.0\n",
            "low_limit is -4.5\n",
            "up_limit is 7.5\n",
            "outlier in the dataset is [9.0, 10.0, 8.0, 12.0, 10.0, 8.0, 11.0, 9.0, 8.0, 8.0, 9.0, 9.0, 11.0, 11.0, 9.0, 8.0, 8.0, 12.0, 8.0, 9.0, 8.0, 9.0, 12.0, 14.0, 11.0, 12.0, 9.0, 14.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 11.0, 11.0, 8.0, 9.0, 9.0, 11.0, 8.0, 11.0, 12.0, 16.0, 10.0, 9.0, 9.0, 11.0, 11.0, 10.0, 9.0, 8.0, 8.0, 8.0, 9.0, 8.0, 8.0, 9.0, 9.0, 8.0, 9.0, 8.0, 8.0, 11.0, 8.0, 8.0, 9.0, 8.0, 9.0, 10.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 12.0, 10.0, 11.0, 10.0, 9.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['DL'],25)\n",
        "Q2 = np.percentile(data['DL'],50)\n",
        "Q3 = np.percentile(data['DL'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['DL']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['DL'] = np.where(data['DL']>up_lim, up_lim, data['DL']) \n",
        "data['DL'] = np.where(data['DL']<low_lim, low_lim, data['DL'])\n",
        "outlier = []\n",
        "for x in data['DL']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OS9ot9dcnu-y",
        "outputId": "7a1461a2-6d0b-4c08-bcbe-dfb36e8698b4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 0.0\n",
            "Q3= 0.0\n",
            "Interquartile range is 0.0\n",
            "low_limit is 0.0\n",
            "up_limit is 0.0\n",
            "outlier in the dataset is [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['DS'],25)\n",
        "Q2 = np.percentile(data['DS'],50)\n",
        "Q3 = np.percentile(data['DS'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['DS']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['DS'] = np.where(data['DS']>up_lim, up_lim, data['DS']) \n",
        "data['DS'] = np.where(data['DS']<low_lim, low_lim, data['DS'])\n",
        "outlier = []\n",
        "for x in data['DS']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MsSiDUuvn6Yq",
        "outputId": "8f61e742-9b0d-4bb4-8774-ec5bba725ff9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 0.0\n",
            "Q3= 0.0\n",
            "Interquartile range is 0.0\n",
            "low_limit is 0.0\n",
            "up_limit is 0.0\n",
            "outlier in the dataset is [2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 3.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 3.0, 3.0, 4.0, 1.0, 3.0, 3.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['DP'],25)\n",
        "Q2 = np.percentile(data['DP'],50)\n",
        "Q3 = np.percentile(data['DP'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['DP']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['DP'] = np.where(data['DP']>up_lim, up_lim, data['DP']) \n",
        "data['DP'] = np.where(data['DP']<low_lim, low_lim, data['DP'])\n",
        "outlier = []\n",
        "for x in data['DP']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cRfXH-H4oF9L",
        "outputId": "403ca591-3c7f-4a0e-898e-e0f2ebb9cd0d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 152.0\n",
            "Q2= 162.0\n",
            "Q3= 174.0\n",
            "Interquartile range is 22.0\n",
            "low_limit is 119.0\n",
            "up_limit is 207.0\n",
            "outlier in the dataset is [213.0, 210.0, 210.0, 210.0, 210.0, 238.0, 238.0, 238.0, 238.0, 238.0, 238.0, 211.0, 211.0, 211.0, 211.0, 211.0, 228.0, 228.0, 228.0, 228.0, 228.0, 230.0, 230.0, 230.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Max'],25)\n",
        "Q2 = np.percentile(data['Max'],50)\n",
        "Q3 = np.percentile(data['Max'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Max']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Max'] = np.where(data['Max']>up_lim, up_lim, data['Max']) \n",
        "data['Max'] = np.where(data['Max']<low_lim, low_lim, data['Max'])\n",
        "outlier = []\n",
        "for x in data['Max']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nBznc-1XoWxl",
        "outputId": "0b2fc6d7-adb4-4ce6-856f-0e6f834cd2a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 2.0\n",
            "Q2= 3.0\n",
            "Q3= 6.0\n",
            "Interquartile range is 4.0\n",
            "low_limit is -4.0\n",
            "up_limit is 12.0\n",
            "outlier in the dataset is [13.0, 13.0, 13.0, 13.0, 13.0, 14.0, 13.0, 15.0, 16.0, 13.0, 13.0, 14.0, 16.0, 13.0, 14.0, 18.0, 14.0, 14.0, 13.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Nmax'],25)\n",
        "Q2 = np.percentile(data['Nmax'],50)\n",
        "Q3 = np.percentile(data['Nmax'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Nmax']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Nmax'] = np.where(data['Nmax']>up_lim, up_lim, data['Nmax']) \n",
        "data['Nmax'] = np.where(data['Nmax']<low_lim, low_lim, data['Nmax'])\n",
        "outlier = []\n",
        "for x in data['Nmax']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YXxmS7F8opYx",
        "outputId": "cd8983d2-bdcb-4dfb-ab00-23fe5417d5f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 0.0\n",
            "Q2= 0.0\n",
            "Q3= 0.0\n",
            "Interquartile range is 0.0\n",
            "low_limit is 0.0\n",
            "up_limit is 0.0\n",
            "outlier in the dataset is [1.0, 1.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 10.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 4.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 2.0, 1.0, 8.0, 7.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 5.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 3.0, 1.0, 1.0, 1.0, 3.0, 3.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 3.0, 2.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 3.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Nzeros'],25)\n",
        "Q2 = np.percentile(data['Nzeros'],50)\n",
        "Q3 = np.percentile(data['Nzeros'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Nzeros']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Nzeros'] = np.where(data['Nzeros']>up_lim, up_lim, data['Nzeros']) \n",
        "data['Nzeros'] = np.where(data['Nzeros']<low_lim, low_lim, data['Nzeros'])\n",
        "outlier = []\n",
        "for x in data['Nzeros']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2oZCVHH9o7Hq",
        "outputId": "61f2483a-5970-4055-bc73-cc92c02d2941"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 129.0\n",
            "Q2= 139.0\n",
            "Q3= 148.0\n",
            "Interquartile range is 19.0\n",
            "low_limit is 100.5\n",
            "up_limit is 176.5\n",
            "outlier in the dataset is [76.0, 71.0, 75.0, 186.0, 186.0, 187.0, 186.0, 186.0, 186.0, 186.0, 180.0, 180.0, 180.0, 180.0, 90.0, 75.0, 75.0, 75.0, 97.0, 75.0, 75.0, 99.0, 99.0, 99.0, 99.0, 99.0, 86.0, 98.0, 95.0, 91.0, 91.0, 91.0, 91.0, 88.0, 91.0, 89.0, 89.0, 89.0, 88.0, 88.0, 88.0, 88.0, 88.0, 179.0, 91.0, 91.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 67.0, 67.0, 67.0, 67.0, 67.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 100.0, 100.0, 93.0, 93.0, 77.0, 69.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Mode'],25)\n",
        "Q2 = np.percentile(data['Mode'],50)\n",
        "Q3 = np.percentile(data['Mode'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Mode']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Mode'] = np.where(data['Mode']>up_lim, up_lim, data['Mode']) \n",
        "data['Mode'] = np.where(data['Mode']<low_lim, low_lim, data['Mode'])\n",
        "outlier = []\n",
        "for x in data['Mode']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gwuTRvTMpYH3",
        "outputId": "5dff8a0e-d980-4e2c-d0b0-c21dd7c16dc6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 125.0\n",
            "Q2= 136.0\n",
            "Q3= 145.0\n",
            "Interquartile range is 20.0\n",
            "low_limit is 95.0\n",
            "up_limit is 175.0\n",
            "outlier in the dataset is [178.0, 180.0, 182.0, 90.0, 87.0, 91.0, 83.0, 87.0, 84.0, 78.0, 85.0, 82.0, 92.0, 93.0, 93.0, 85.0, 81.0, 83.0, 79.0, 76.0, 89.0, 88.0, 85.0, 83.0, 75.0, 94.0, 93.0, 94.0, 88.0, 90.0, 91.0, 88.0, 86.0, 84.0, 83.0, 85.0, 85.0, 82.0, 80.0, 80.0, 84.0, 92.0, 89.0, 94.0, 73.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Mean'],25)\n",
        "Q2 = np.percentile(data['Mean'],50)\n",
        "Q3 = np.percentile(data['Mean'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Mean']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Mean'] = np.where(data['Mean']>up_lim, up_lim, data['Mean']) \n",
        "data['Mean'] = np.where(data['Mean']<low_lim, low_lim, data['Mean'])\n",
        "outlier = []\n",
        "for x in data['Mean']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JL05_cEwptBY",
        "outputId": "92329b75-af0c-43fa-f52d-6b8b13521b69"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 129.0\n",
            "Q2= 139.0\n",
            "Q3= 148.0\n",
            "Interquartile range is 19.0\n",
            "low_limit is 100.5\n",
            "up_limit is 176.5\n",
            "outlier in the dataset is [180.0, 183.0, 186.0, 178.0, 177.0, 91.0, 78.0, 77.0, 86.0, 79.0, 95.0, 95.0, 94.0, 94.0, 97.0, 95.0, 98.0, 93.0, 95.0, 99.0, 100.0, 92.0, 87.0, 90.0, 82.0, 79.0, 92.0, 97.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Median'],25)\n",
        "Q2 = np.percentile(data['Median'],50)\n",
        "Q3 = np.percentile(data['Median'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Median']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Median'] = np.where(data['Median']>up_lim, up_lim, data['Median']) \n",
        "data['Median'] = np.where(data['Median']<low_lim, low_lim, data['Median'])\n",
        "outlier = []\n",
        "for x in data['Median']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4e_Bn5OCp5fm",
        "outputId": "b33f53ba-1824-472b-f41c-89bb9174891e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1= 2.0\n",
            "Q2= 7.0\n",
            "Q3= 24.0\n",
            "Interquartile range is 22.0\n",
            "low_limit is -31.0\n",
            "up_limit is 57.0\n",
            "outlier in the dataset is [73.0, 170.0, 215.0, 76.0, 70.0, 138.0, 148.0, 73.0, 89.0, 66.0, 75.0, 72.0, 108.0, 86.0, 60.0, 117.0, 72.0, 137.0, 65.0, 136.0, 60.0, 70.0, 157.0, 106.0, 137.0, 177.0, 75.0, 72.0, 76.0, 62.0, 74.0, 69.0, 79.0, 65.0, 83.0, 79.0, 100.0, 137.0, 70.0, 75.0, 95.0, 75.0, 75.0, 61.0, 68.0, 104.0, 86.0, 76.0, 69.0, 103.0, 148.0, 129.0, 85.0, 72.0, 61.0, 72.0, 82.0, 70.0, 91.0, 90.0, 92.0, 64.0, 62.0, 79.0, 61.0, 63.0, 59.0, 127.0, 114.0, 65.0, 78.0, 79.0, 65.0, 92.0, 84.0, 94.0, 72.0, 70.0, 97.0, 80.0, 73.0, 59.0, 76.0, 71.0, 101.0, 74.0, 103.0, 126.0, 134.0, 144.0, 108.0, 66.0, 68.0, 73.0, 80.0, 87.0, 115.0, 83.0, 96.0, 76.0, 94.0, 72.0, 116.0, 61.0, 87.0, 97.0, 84.0, 73.0, 77.0, 119.0, 110.0, 63.0, 64.0, 59.0, 89.0, 98.0, 90.0, 85.0, 100.0, 103.0, 103.0, 113.0, 64.0, 59.0, 61.0, 59.0, 59.0, 59.0, 101.0, 70.0, 69.0, 61.0, 72.0, 148.0, 195.0, 182.0, 128.0, 88.0, 83.0, 109.0, 62.0, 75.0, 64.0, 64.0, 59.0, 109.0, 89.0, 98.0, 83.0, 68.0, 77.0, 80.0, 121.0, 113.0, 76.0, 72.0, 78.0, 61.0, 71.0, 94.0, 79.0, 94.0, 269.0, 250.0, 254.0, 243.0, 241.0, 190.0, 71.0, 70.0, 80.0, 79.0, 75.0, 90.0, 95.0, 95.0, 108.0, 74.0, 147.0, 114.0, 103.0, 95.0, 128.0, 71.0]\n",
            "outlier in the dataset after capping is []\n"
          ]
        }
      ],
      "source": [
        "Q1 = np.percentile(data['Variance'],25)\n",
        "Q2 = np.percentile(data['Variance'],50)\n",
        "Q3 = np.percentile(data['Variance'],75)\n",
        "print('Q1=',Q1)\n",
        "print('Q2=',Q2)\n",
        "print('Q3=',Q3)\n",
        "IQR = Q3 - Q1\n",
        "print('Interquartile range is', IQR)\n",
        "low_lim = Q1 - 1.5 * IQR\n",
        "up_lim = Q3 + 1.5 * IQR\n",
        "print('low_limit is',low_lim)\n",
        "print('up_limit is',up_lim)\n",
        "outlier = []\n",
        "for x in data['Variance']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset is', outlier)\n",
        "data['Variance'] = np.where(data['Variance']>up_lim, up_lim, data['Variance']) \n",
        "data['Variance'] = np.where(data['Variance']<low_lim, low_lim, data['Variance'])\n",
        "outlier = []\n",
        "for x in data['Variance']:\n",
        "  if((x > up_lim) or (x < low_lim)):\n",
        "    outlier.append(x)\n",
        "print('outlier in the dataset after capping is', outlier)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Selecting only the attributes selected in feature selection"
      ],
      "metadata": {
        "id": "vDEYzR0q50Rj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = data[['CLASS','Median','Mean','ASTV','MSTV','MLTV','LBE','ALTV','UC','Tendency']]   \n",
        "Y = data['NSP']\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "X_scaled.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L9MnziX45z8c",
        "outputId": "bd4bb8db-7396-4bae-8079-36a918b37c52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2126, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PrBxeDe8dr72"
      },
      "source": [
        "# Split the dataset into train and test data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y = pd.get_dummies(data.NSP)"
      ],
      "metadata": {
        "id": "lgAjQN69a4eJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "ouCNzSBWsW8g",
        "outputId": "1b6b76ff-653d-4f1b-f65a-128e30d3eba9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      1.0  2.0  3.0\n",
              "0       0    1    0\n",
              "1       1    0    0\n",
              "2       1    0    0\n",
              "3       1    0    0\n",
              "4       1    0    0\n",
              "...   ...  ...  ...\n",
              "2121    0    1    0\n",
              "2122    0    1    0\n",
              "2123    0    1    0\n",
              "2124    0    1    0\n",
              "2125    1    0    0\n",
              "\n",
              "[2126 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c47e1ae-31b8-41d5-9079-72aea1dc376b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1.0</th>\n",
              "      <th>2.0</th>\n",
              "      <th>3.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2121</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2122</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2123</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2124</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2125</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2126 rows Ã— 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c47e1ae-31b8-41d5-9079-72aea1dc376b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5c47e1ae-31b8-41d5-9079-72aea1dc376b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5c47e1ae-31b8-41d5-9079-72aea1dc376b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "IC_XHsTMbExV",
        "outputId": "8a97a837-c0c0-42e8-e670-e63a04664225"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      CLASS  Median   Mean  ASTV  MSTV  MLTV    LBE  ALTV   UC  Tendency\n",
              "0       9.0   121.0  137.0  73.0   0.5   2.4  120.0  27.5  0.0       1.0\n",
              "1       6.0   140.0  136.0  17.0   2.1  10.4  132.0   0.0  4.0       0.0\n",
              "2       6.0   138.0  135.0  16.0   2.1  13.4  133.0   0.0  5.0       0.0\n",
              "3       6.0   137.0  134.0  16.0   2.4  20.1  134.0   0.0  6.0       1.0\n",
              "4       2.0   138.0  136.0  16.0   2.4  19.9  132.0   0.0  5.0       1.0\n",
              "...     ...     ...    ...   ...   ...   ...    ...   ...  ...       ...\n",
              "2121    5.0   152.0  150.0  79.0   0.2   7.2  140.0  25.0  6.0       0.0\n",
              "2122    5.0   151.0  148.0  78.0   0.4   7.1  140.0  22.0  9.0       1.0\n",
              "2123    5.0   152.0  148.0  79.0   0.4   6.1  140.0  20.0  7.0       1.0\n",
              "2124    5.0   151.0  147.0  78.0   0.4   7.0  140.0  27.0  9.0       1.0\n",
              "2125    1.0   145.0  143.0  74.0   0.4   5.0  142.0  27.5  5.0       0.0\n",
              "\n",
              "[2126 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4980f771-bd93-49fe-8f9c-6ee5449098e4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CLASS</th>\n",
              "      <th>Median</th>\n",
              "      <th>Mean</th>\n",
              "      <th>ASTV</th>\n",
              "      <th>MSTV</th>\n",
              "      <th>MLTV</th>\n",
              "      <th>LBE</th>\n",
              "      <th>ALTV</th>\n",
              "      <th>UC</th>\n",
              "      <th>Tendency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>120.0</td>\n",
              "      <td>27.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>2.1</td>\n",
              "      <td>10.4</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>135.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.1</td>\n",
              "      <td>13.4</td>\n",
              "      <td>133.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>20.1</td>\n",
              "      <td>134.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.4</td>\n",
              "      <td>19.9</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2121</th>\n",
              "      <td>5.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>7.2</td>\n",
              "      <td>140.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2122</th>\n",
              "      <td>5.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>7.1</td>\n",
              "      <td>140.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2123</th>\n",
              "      <td>5.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>6.1</td>\n",
              "      <td>140.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2124</th>\n",
              "      <td>5.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>147.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>7.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2125</th>\n",
              "      <td>1.0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>5.0</td>\n",
              "      <td>142.0</td>\n",
              "      <td>27.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2126 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4980f771-bd93-49fe-8f9c-6ee5449098e4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4980f771-bd93-49fe-8f9c-6ee5449098e4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4980f771-bd93-49fe-8f9c-6ee5449098e4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "X_scaled.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1pgMVsilY7aH",
        "outputId": "5a6483c2-ff9a-48cc-94e4-acd1d79dc853"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2126, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "xtrain,xtest,ytrain,ytest = train_test_split(X_scaled,Y,test_size=0.2)"
      ],
      "metadata": {
        "id": "jF6B0Eb7ZGX8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.cm as cm\n",
        "import random\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Activation, Dropout, Flatten, Dense, LSTM, RepeatVector, TimeDistributed"
      ],
      "metadata": {
        "id": "fDOGedXfGznz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.layers import Layer\n",
        "from keras import backend as K\n",
        "from tensorflow import keras"
      ],
      "metadata": {
        "id": "VH8-lydRtvxJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class RBFLayer(Layer):\n",
        "    def __init__(self, units, gamma, **kwargs):\n",
        "        super(RBFLayer, self).__init__(**kwargs)\n",
        "        self.units = units\n",
        "        self.gamma = K.cast_to_floatx(gamma)\n",
        "\n",
        "    def build(self, input_shape):\n",
        "#         print(input_shape)\n",
        "#         print(self.units)\n",
        "        self.mu = self.add_weight(name='mu',\n",
        "                                  shape=(int(input_shape[1]), self.units),\n",
        "                                  initializer='uniform',\n",
        "                                  trainable=True)\n",
        "        super(RBFLayer, self).build(input_shape)\n",
        "\n",
        "    def call(self, inputs):\n",
        "        diff = K.expand_dims(inputs) - self.mu\n",
        "        l2 = K.sum(K.pow(diff, 2), axis=1)\n",
        "        res = K.exp(-1 * self.gamma * l2)\n",
        "        return res\n",
        "\n",
        "    def compute_output_shape(self, input_shape):\n",
        "        return (input_shape[0], self.units)"
      ],
      "metadata": {
        "id": "rGWpE79_vR6B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1nQ4cxEey3Zg",
        "outputId": "86ed2346-5157-4ddf-c4bb-5b0bcbc2c24c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1700, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "model.add(Dense(10, input_dim=10, activation='relu'))\n",
        "model.add(RBFLayer(10, 0.5))\n",
        "model.add(Dense(3, activation='softmax', name='foo'))"
      ],
      "metadata": {
        "id": "af4taYnbxhkM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n",
        "early_stop = keras.callbacks.EarlyStopping(patience=20)\n",
        "history = model.fit(xtrain,ytrain,validation_data=(xtest,ytest),epochs=100,callbacks=early_stop)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y81msxxVywSD",
        "outputId": "5ec9eaf9-e2ed-4c38-920f-4b6ef23ba5a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "54/54 [==============================] - 1s 4ms/step - loss: 0.1843 - accuracy: 0.7700 - val_loss: 0.1497 - val_accuracy: 0.8122\n",
            "Epoch 2/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.1276 - accuracy: 0.7700 - val_loss: 0.1001 - val_accuracy: 0.8122\n",
            "Epoch 3/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0957 - accuracy: 0.7700 - val_loss: 0.0754 - val_accuracy: 0.8122\n",
            "Epoch 4/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0819 - accuracy: 0.7700 - val_loss: 0.0652 - val_accuracy: 0.8122\n",
            "Epoch 5/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0755 - accuracy: 0.7700 - val_loss: 0.0605 - val_accuracy: 0.8122\n",
            "Epoch 6/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0718 - accuracy: 0.7700 - val_loss: 0.0583 - val_accuracy: 0.8122\n",
            "Epoch 7/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0692 - accuracy: 0.7700 - val_loss: 0.0564 - val_accuracy: 0.8122\n",
            "Epoch 8/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0673 - accuracy: 0.7700 - val_loss: 0.0551 - val_accuracy: 0.8122\n",
            "Epoch 9/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0655 - accuracy: 0.8341 - val_loss: 0.0536 - val_accuracy: 0.8944\n",
            "Epoch 10/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0641 - accuracy: 0.8624 - val_loss: 0.0526 - val_accuracy: 0.9014\n",
            "Epoch 11/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0627 - accuracy: 0.8653 - val_loss: 0.0515 - val_accuracy: 0.9038\n",
            "Epoch 12/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0613 - accuracy: 0.8682 - val_loss: 0.0503 - val_accuracy: 0.9108\n",
            "Epoch 13/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0601 - accuracy: 0.8700 - val_loss: 0.0496 - val_accuracy: 0.9085\n",
            "Epoch 14/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0590 - accuracy: 0.8741 - val_loss: 0.0485 - val_accuracy: 0.9108\n",
            "Epoch 15/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0578 - accuracy: 0.8747 - val_loss: 0.0477 - val_accuracy: 0.9131\n",
            "Epoch 16/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0567 - accuracy: 0.8788 - val_loss: 0.0470 - val_accuracy: 0.9131\n",
            "Epoch 17/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0556 - accuracy: 0.8794 - val_loss: 0.0458 - val_accuracy: 0.9131\n",
            "Epoch 18/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0546 - accuracy: 0.8835 - val_loss: 0.0450 - val_accuracy: 0.9272\n",
            "Epoch 19/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0534 - accuracy: 0.8894 - val_loss: 0.0441 - val_accuracy: 0.9366\n",
            "Epoch 20/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0522 - accuracy: 0.8971 - val_loss: 0.0432 - val_accuracy: 0.9366\n",
            "Epoch 21/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0510 - accuracy: 0.9053 - val_loss: 0.0422 - val_accuracy: 0.9460\n",
            "Epoch 22/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0497 - accuracy: 0.9165 - val_loss: 0.0414 - val_accuracy: 0.9460\n",
            "Epoch 23/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0482 - accuracy: 0.9300 - val_loss: 0.0402 - val_accuracy: 0.9460\n",
            "Epoch 24/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0467 - accuracy: 0.9306 - val_loss: 0.0393 - val_accuracy: 0.9507\n",
            "Epoch 25/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0451 - accuracy: 0.9329 - val_loss: 0.0382 - val_accuracy: 0.9507\n",
            "Epoch 26/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0435 - accuracy: 0.9341 - val_loss: 0.0371 - val_accuracy: 0.9507\n",
            "Epoch 27/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0422 - accuracy: 0.9365 - val_loss: 0.0360 - val_accuracy: 0.9507\n",
            "Epoch 28/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0409 - accuracy: 0.9359 - val_loss: 0.0352 - val_accuracy: 0.9484\n",
            "Epoch 29/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0398 - accuracy: 0.9371 - val_loss: 0.0347 - val_accuracy: 0.9484\n",
            "Epoch 30/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0389 - accuracy: 0.9382 - val_loss: 0.0336 - val_accuracy: 0.9484\n",
            "Epoch 31/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0380 - accuracy: 0.9359 - val_loss: 0.0331 - val_accuracy: 0.9484\n",
            "Epoch 32/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0373 - accuracy: 0.9365 - val_loss: 0.0327 - val_accuracy: 0.9460\n",
            "Epoch 33/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0366 - accuracy: 0.9365 - val_loss: 0.0319 - val_accuracy: 0.9484\n",
            "Epoch 34/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0360 - accuracy: 0.9371 - val_loss: 0.0314 - val_accuracy: 0.9484\n",
            "Epoch 35/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0355 - accuracy: 0.9371 - val_loss: 0.0311 - val_accuracy: 0.9507\n",
            "Epoch 36/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0350 - accuracy: 0.9371 - val_loss: 0.0311 - val_accuracy: 0.9484\n",
            "Epoch 37/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0346 - accuracy: 0.9382 - val_loss: 0.0308 - val_accuracy: 0.9484\n",
            "Epoch 38/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0342 - accuracy: 0.9382 - val_loss: 0.0303 - val_accuracy: 0.9507\n",
            "Epoch 39/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0338 - accuracy: 0.9382 - val_loss: 0.0307 - val_accuracy: 0.9460\n",
            "Epoch 40/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0335 - accuracy: 0.9400 - val_loss: 0.0304 - val_accuracy: 0.9460\n",
            "Epoch 41/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0333 - accuracy: 0.9406 - val_loss: 0.0298 - val_accuracy: 0.9484\n",
            "Epoch 42/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0330 - accuracy: 0.9406 - val_loss: 0.0302 - val_accuracy: 0.9507\n",
            "Epoch 43/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0329 - accuracy: 0.9400 - val_loss: 0.0295 - val_accuracy: 0.9507\n",
            "Epoch 44/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0325 - accuracy: 0.9429 - val_loss: 0.0299 - val_accuracy: 0.9507\n",
            "Epoch 45/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0323 - accuracy: 0.9424 - val_loss: 0.0295 - val_accuracy: 0.9507\n",
            "Epoch 46/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0321 - accuracy: 0.9406 - val_loss: 0.0297 - val_accuracy: 0.9507\n",
            "Epoch 47/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0320 - accuracy: 0.9424 - val_loss: 0.0292 - val_accuracy: 0.9507\n",
            "Epoch 48/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0315 - accuracy: 0.9429 - val_loss: 0.0295 - val_accuracy: 0.9507\n",
            "Epoch 49/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0313 - accuracy: 0.9429 - val_loss: 0.0292 - val_accuracy: 0.9507\n",
            "Epoch 50/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0312 - accuracy: 0.9424 - val_loss: 0.0295 - val_accuracy: 0.9507\n",
            "Epoch 51/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0310 - accuracy: 0.9435 - val_loss: 0.0289 - val_accuracy: 0.9531\n",
            "Epoch 52/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0307 - accuracy: 0.9435 - val_loss: 0.0287 - val_accuracy: 0.9531\n",
            "Epoch 53/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0305 - accuracy: 0.9429 - val_loss: 0.0288 - val_accuracy: 0.9507\n",
            "Epoch 54/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0304 - accuracy: 0.9429 - val_loss: 0.0290 - val_accuracy: 0.9484\n",
            "Epoch 55/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0302 - accuracy: 0.9441 - val_loss: 0.0289 - val_accuracy: 0.9507\n",
            "Epoch 56/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0302 - accuracy: 0.9435 - val_loss: 0.0291 - val_accuracy: 0.9460\n",
            "Epoch 57/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0300 - accuracy: 0.9435 - val_loss: 0.0287 - val_accuracy: 0.9484\n",
            "Epoch 58/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0297 - accuracy: 0.9441 - val_loss: 0.0284 - val_accuracy: 0.9507\n",
            "Epoch 59/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0296 - accuracy: 0.9441 - val_loss: 0.0283 - val_accuracy: 0.9507\n",
            "Epoch 60/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0293 - accuracy: 0.9447 - val_loss: 0.0283 - val_accuracy: 0.9507\n",
            "Epoch 61/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0292 - accuracy: 0.9447 - val_loss: 0.0284 - val_accuracy: 0.9531\n",
            "Epoch 62/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0291 - accuracy: 0.9447 - val_loss: 0.0284 - val_accuracy: 0.9531\n",
            "Epoch 63/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0290 - accuracy: 0.9459 - val_loss: 0.0284 - val_accuracy: 0.9507\n",
            "Epoch 64/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0288 - accuracy: 0.9471 - val_loss: 0.0280 - val_accuracy: 0.9484\n",
            "Epoch 65/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0286 - accuracy: 0.9488 - val_loss: 0.0282 - val_accuracy: 0.9460\n",
            "Epoch 66/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0284 - accuracy: 0.9488 - val_loss: 0.0280 - val_accuracy: 0.9507\n",
            "Epoch 67/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0283 - accuracy: 0.9518 - val_loss: 0.0278 - val_accuracy: 0.9484\n",
            "Epoch 68/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0281 - accuracy: 0.9506 - val_loss: 0.0276 - val_accuracy: 0.9531\n",
            "Epoch 69/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0279 - accuracy: 0.9506 - val_loss: 0.0279 - val_accuracy: 0.9460\n",
            "Epoch 70/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0278 - accuracy: 0.9506 - val_loss: 0.0278 - val_accuracy: 0.9507\n",
            "Epoch 71/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0277 - accuracy: 0.9512 - val_loss: 0.0277 - val_accuracy: 0.9507\n",
            "Epoch 72/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0275 - accuracy: 0.9524 - val_loss: 0.0276 - val_accuracy: 0.9531\n",
            "Epoch 73/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0274 - accuracy: 0.9518 - val_loss: 0.0277 - val_accuracy: 0.9484\n",
            "Epoch 74/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0273 - accuracy: 0.9535 - val_loss: 0.0275 - val_accuracy: 0.9507\n",
            "Epoch 75/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0272 - accuracy: 0.9524 - val_loss: 0.0271 - val_accuracy: 0.9531\n",
            "Epoch 76/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0270 - accuracy: 0.9518 - val_loss: 0.0270 - val_accuracy: 0.9554\n",
            "Epoch 77/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0268 - accuracy: 0.9553 - val_loss: 0.0273 - val_accuracy: 0.9484\n",
            "Epoch 78/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0267 - accuracy: 0.9547 - val_loss: 0.0273 - val_accuracy: 0.9507\n",
            "Epoch 79/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0267 - accuracy: 0.9529 - val_loss: 0.0269 - val_accuracy: 0.9531\n",
            "Epoch 80/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0265 - accuracy: 0.9547 - val_loss: 0.0269 - val_accuracy: 0.9507\n",
            "Epoch 81/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0264 - accuracy: 0.9547 - val_loss: 0.0267 - val_accuracy: 0.9531\n",
            "Epoch 82/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0263 - accuracy: 0.9553 - val_loss: 0.0268 - val_accuracy: 0.9531\n",
            "Epoch 83/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0261 - accuracy: 0.9559 - val_loss: 0.0267 - val_accuracy: 0.9531\n",
            "Epoch 84/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0259 - accuracy: 0.9559 - val_loss: 0.0267 - val_accuracy: 0.9531\n",
            "Epoch 85/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0257 - accuracy: 0.9565 - val_loss: 0.0265 - val_accuracy: 0.9554\n",
            "Epoch 86/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0256 - accuracy: 0.9559 - val_loss: 0.0265 - val_accuracy: 0.9484\n",
            "Epoch 87/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0254 - accuracy: 0.9565 - val_loss: 0.0263 - val_accuracy: 0.9531\n",
            "Epoch 88/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0253 - accuracy: 0.9565 - val_loss: 0.0262 - val_accuracy: 0.9507\n",
            "Epoch 89/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0252 - accuracy: 0.9565 - val_loss: 0.0262 - val_accuracy: 0.9507\n",
            "Epoch 90/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0250 - accuracy: 0.9576 - val_loss: 0.0261 - val_accuracy: 0.9484\n",
            "Epoch 91/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0248 - accuracy: 0.9576 - val_loss: 0.0259 - val_accuracy: 0.9484\n",
            "Epoch 92/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0247 - accuracy: 0.9576 - val_loss: 0.0260 - val_accuracy: 0.9484\n",
            "Epoch 93/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0246 - accuracy: 0.9594 - val_loss: 0.0261 - val_accuracy: 0.9484\n",
            "Epoch 94/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0245 - accuracy: 0.9571 - val_loss: 0.0259 - val_accuracy: 0.9507\n",
            "Epoch 95/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0243 - accuracy: 0.9588 - val_loss: 0.0257 - val_accuracy: 0.9507\n",
            "Epoch 96/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0242 - accuracy: 0.9588 - val_loss: 0.0254 - val_accuracy: 0.9507\n",
            "Epoch 97/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0241 - accuracy: 0.9600 - val_loss: 0.0254 - val_accuracy: 0.9507\n",
            "Epoch 98/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0237 - accuracy: 0.9600 - val_loss: 0.0255 - val_accuracy: 0.9484\n",
            "Epoch 99/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0236 - accuracy: 0.9600 - val_loss: 0.0252 - val_accuracy: 0.9484\n",
            "Epoch 100/100\n",
            "54/54 [==============================] - 0s 2ms/step - loss: 0.0235 - accuracy: 0.9612 - val_loss: 0.0253 - val_accuracy: 0.9484\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pRfWboCE0TVQ",
        "outputId": "e41de5f1-e502-4447-d9e0-7c715883ea5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_5\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_2 (Dense)             (None, 10)                110       \n",
            "                                                                 \n",
            " rbf_layer_2 (RBFLayer)      (None, 10)                100       \n",
            "                                                                 \n",
            " foo (Dense)                 (None, 3)                 33        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 243\n",
            "Trainable params: 243\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "a9CfQR3Yb6kU",
        "outputId": "532f5a13-3750-4ac2-8fa8-229abea539e0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "history_df = pd.DataFrame(history.history)\n",
        "plt.plot(history_df.accuracy,label=\"Accuracy\")\n",
        "plt.plot(history_df.val_accuracy,label=\"Validation Accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.grid()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "9_KA4N4ub6kU",
        "outputId": "b81bd605-8f37-456d-bcb5-c935cf4f42c5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "history_df = pd.DataFrame(history.history)\n",
        "plt.plot(history_df.loss,label=\"Loss\")\n",
        "plt.plot(history_df.val_loss,label=\"Validation Loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.grid()"
      ]
    }
  ]
}